{"version":3,"sources":["markdownEdit.js","test.md","App.jsx","reportWebVitals.js","index.js"],"names":["MarkDownEdit","props","text","console","log","test","App","callback","useState","name","gender","setName","mk","setMk","react","data","fetch","then","res","className","onChange","evt","nativeEvent","value","onClick","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEe,SAASA,EAAaC,GACnC,OACE,cAAC,IAAD,UAAWA,EAAMC,OCJN,UAA0B,gCCWzCC,QAAQC,IAAIC,GA8BGC,MA7Bf,WACE,IARqBC,EAQrB,EAAuBC,mBAAS,CAACC,KAAK,OAAOC,OAAO,IAApD,mBAAOD,EAAP,KAAYE,EAAZ,KACA,EAAmBH,mBAAS,IAA5B,mBAAOI,EAAP,KAAUC,EAAV,KAUA,OARAV,QAAQC,IAAIU,KAXSP,EAeL,SAAAQ,GACdF,EAAME,GACNZ,QAAQC,IAAI,OAAOW,EAAKN,IAhB1BO,MAAMX,GAAMY,MAAK,SAAAC,GAAG,OAAIA,EAAIhB,UAAQe,MAAK,SAAAf,GACvCK,EAASL,MAkBX,gCACE,cAACF,EAAD,CAAcE,KAAMU,IACpB,qBAAIO,UAAU,SAAd,mBAA8BV,EAAKA,QACnC,uBACEU,UAAU,OACVC,SAAU,SAACC,GAAQV,EAAQF,EAAKA,KAAKY,EAAIC,YAAYP,OACrDQ,MAAOd,EAAKA,OAEd,0BACA,wBACEe,QAAS,WAjBXb,EAAQ,CAACF,KAiBuB,8BADhC,sB,OCnBWgB,EAbS,SAAAC,GAIlBC,YAAOD,GACPE,YAAOF,GACPG,YAAOH,GACPI,YAAOJ,GACPK,YAAQL,ICJdM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,EAAgBtB,QAAQC,O","file":"static/js/main.6b8da790.chunk.js","sourcesContent":["\nimport Markdown from \"react-markdown\"\nexport default function MarkDownEdit(props){\n  return (\n    <Markdown>{props.text}</Markdown>\n  )\n}","export default __webpack_public_path__ + \"static/media/test.6a003b10.md\";","import './App.css';\nimport { useState} from 'react'\nimport react from 'react'\nimport MarkDownEdit from './markdownEdit';\nimport test from './test.md'\nfunction getList(parma,callback){\n  fetch(test).then(res => res.text()).then(text => {\n    callback(text)\n  })\n  // callback('return list')\n}\nconsole.log(test)\nfunction App() {\n  const [name,setName] = useState({name:'jack',gender:1})\n  const [mk,setMk] = useState('')\n  // const inputEle = useRef(null)\n  console.log(react)\n  const setNameHandler = (text) => {\n    setName({name:text})\n  }\n  getList('list', data => {\n    setMk(data)\n    console.log('list',data,name)\n  })\n  return (\n  <div>\n    <MarkDownEdit text={mk}></MarkDownEdit>\n    <h1 className=\"app-h1\">test11{name.name}</h1>\n    <input \n      className=\"test\" \n      onChange={(evt)=>{ setName(name.name+evt.nativeEvent.data)}} \n      value={name.name}>  \n    </input>\n    <input></input>\n    <button \n      onClick={() => setNameHandler('哈哈哈哈')}>Test</button>\n  </div>\n    )\n}\n\n\nexport default App;\n","\nimport  {getCLS,getFID,getFCP,getLCP,getTTFB} from 'web-vitals'\nconst reportWebVitals = onPerfEntry => {\n\n  // if (onPerfEntry && onPerfEntry instanceof Function) {\n  //   web.then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n  //   });\n  // }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}